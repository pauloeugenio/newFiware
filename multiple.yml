version: "3.8"
services:

  #mosquitto
  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - 1883
      - 9001
    ports:
      - 1883:1883
      - 9001:9001
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - default
    restart: always

  # Orion
  orion:
    image: fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    ports:
      - "${ORION_PORT}:${ORION_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG -noCache
    restart: always

  # Cygnus is configured to write context data to Mongo-DB, PostgeSQL and MySQL
  cygnus:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION}
    hostname: cygnus
    container_name: fiware-cygnus
    depends_on:
      - mysql-db
      - mongo-db
    networks:
      - default
    expose:
      - ${CYGNUS_MONGO_SERVICE_PORT} 
      - ${CYGNUS_MYSQL_SERVICE_PORT} 
      - ${CYGNUS_API_PORT}
    ports:
      - ${CYGNUS_MONGO_SERVICE_PORT}:${CYGNUS_MONGO_SERVICE_PORT} # localhost:5051
      - ${CYGNUS_MYSQL_SERVICE_PORT}:${CYGNUS_MYSQL_SERVICE_PORT} # localhost:5050
      - ${CYGNUS_API_PORT}:${CYGNUS_API_PORT} # localhost:5080
    environment:
      - "CYGNUS_MULTIAGENT=true" # Whether to persist data into multiple databases.
      - "CYGNUS_MONGO_SERVICE_PORT=${CYGNUS_MONGO_SERVICE_PORT}"
      - "CYGNUS_MONGO_HOSTS=mongo-db:${MONGO_DB_PORT}" # Comma separated list of Mongo-DB servers which Cygnus will contact to persist historical context data
      - "CYGNUS_MYSQL_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"
      - "CYGNUS_MYSQL_HOST=mysql-db" # Hostname of the MySQL server used to persist historical context data
      - "CYGNUS_MYSQL_PORT=${MYSQL_DB_PORT}" # Port that the MySQL server uses to listen to commands
      - "CYGNUS_MYSQL_USER=root" # Username for the MySQL database user
      - "CYGNUS_MYSQL_PASS=123" # Password for the MySQL database user
      - "CYGNUS_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"
      - "CYGNUS_API_PORT=${CYGNUS_API_PORT}" # Port that Cygnus listens on for operational reasons
      - "CYGNUS_LOG_LEVEL=DEBUG" #The logging level for Cygnus
    restart: always
  
  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - ${IOTA_NORTH_PORT}
      - ${IOTA_SOUTH_PORT}
    ports:
      - ${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT} # localhost:4041
      - ${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT} # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_MQTT_HOST=mosquitto" # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=1883" # The port the MQTT Broker is listening on to receive topics 
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
    restart: always

  
  # Databases
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - ${MONGO_DB_PORT}
    ports:
      - ${MONGO_DB_PORT}:${MONGO_DB_PORT} # localhost:27017 # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data
    restart: always
    

  mysql-db:
    image: mysql:${MYSQL_DB_VERSION}
    hostname: mysql-db
    container_name: db-mysql
    expose:
      - ${MYSQL_DB_PORT}
    ports:
      - ${MYSQL_DB_PORT}:${MYSQL_DB_PORT} # localhost:3306
    networks:
      - default
    environment:
      - "MYSQL_ROOT_PASSWORD=123"
      - "MYSQL_ROOT_HOST=%"
    volumes:
      - mysql-db:/var/lib/mysql
    restart: always
      
  portainer:
    image: portainer/portainer
    hostname: portainer
    container_name: portainer
    networks:
      - default
    expose:
      - 9000
    ports:
      - 572:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data/portainer/portainer
    restart: always

networks:
  default:
    labels:
      org.fiware: 'tutorial'
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  mongo-db: ~
  mysql-db: ~
  portainer_data: ~
